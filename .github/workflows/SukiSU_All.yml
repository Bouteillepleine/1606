name: Build OnePlus Ultra All
on:
  workflow_dispatch:
    inputs:
      FEIL:
        type: choice
        description: "Configuration File"
        required: true
        default: oneplus_13r
        options:
          - oneplus_nord_ce4_v
          - oneplus_ace_3v_v
          - oneplus_nord_4
          - oneplus_10_pro_v
          - oneplus_10t_v
          - oneplus_11r_v
          - oneplus_ace2_v
          - oneplus_ace_pro_v
          - oneplus_11_v
          - oneplus_12r_v
          - oneplus_ace2pro_v
          - oneplus_ace3_v
          - oneplus_open_v
          - oneplus12_v
          - oneplus_13r
          - oneplus_ace3_pro_v
          - oneplus_ace5
          - oneplus_pad2_v
          - oneplus_13
          - oneplus_ace5_pro
          - oneplus_13t
          - oneplus_13s
          - oneplus_pad_2_pro
          - oneplus_pad_3
      BUILD_METHOD:
        type: choice
        description: "Build Method"
        required: true
        default: gki
        options:
          - gki
          - perf
      SUFFIX:
        type: string
        description: "Custom Kernel Suffix (leave empty to use random string)"
        required: false
        default: ""
      FAST_BUILD:
        type: boolean
        description: "Enable Fast Build?"
        required: true
        default: true
      VFS:
        type: boolean
        description: "Enable Manual Hooks (VFS)?"
        required: true
        default: true
      KPM:
        type: boolean
        description: "Enable Kernel Modules (KPM)?"
        required: true
        default: true
      SCHED:
        type: boolean
        description: "Add Fengchi Driver?"
        required: true
        default: false
      ZRAM:
        type: boolean
        description: "Add More ZRAM Algorithms?"
        required: true
        default: false

jobs:
  get-config:
    uses: ./.github/workflows/feil-map.yml
    with:
      FEIL: ${{ inputs.FEIL }}
    secrets: inherit

  build:
    needs: get-config
    name: ${{ github.event.inputs.FAST_BUILD == 'true' && ' [FAST]' || '' }}${{ github.event.inputs.SCHED == 'true' && ' [SCHED]' || '' }}${{ github.event.inputs.ZRAM == 'true' && ' [ZRAM]' || '' }}For ${{ github.event.inputs.FEIL }} ${{ github.event.inputs.BUILD_METHOD }} ${{ github.event.inputs.SUFFIX }}
    runs-on: ubuntu-latest
    env:
      CPU: ${{ needs.get-config.outputs.CPU }}
      CPUD: ${{ needs.get-config.outputs.CPUD }}
      ANDROID_VERSION: ${{ needs.get-config.outputs.ANDROID_VERSION }}
      KERNEL_VERSION: ${{ needs.get-config.outputs.KERNEL_VERSION }}
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_DIR: /home/runner/.ccache
      CCACHE_MAXSIZE: 8G
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Create and enable 6G swap
        run: |
          sudo swapoff -a
          sudo fallocate -l 6G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          free -h

      - name: Configure Git
        run: |
          git config --global user.name "O+builder"
          git config --global user.email "O+builder@yahoo.com"

      - name: Show selected inputs debug
        run: |
          echo "Selected CPU: ${{ needs.get-config.outputs.CPU }}"
          echo "Selected FEIL: ${{ github.event.inputs.FEIL }}"
          echo "Selected CPUD: ${{ needs.get-config.outputs.CPUD }}"
          echo "Selected ANDROID_VERSION: ${{ needs.get-config.outputs.ANDROID_VERSION }}"
          echo "Selected KERNEL_VERSION: ${{ needs.get-config.outputs.KERNEL_VERSION }}"
          echo "Selected BUILD_METHOD: ${{ github.event.inputs.BUILD_METHOD }}"
          echo "Custom SUFFIX: ${{ github.event.inputs.SUFFIX }}"
          echo "Selected VFS: ${{ github.event.inputs.VFS }}"
          echo "Selected KPM: ${{ github.event.inputs.KPM }}"
          echo "Selected FAST_BUILD: ${{ github.event.inputs.FAST_BUILD }}"
          echo "Selected ZRAM: ${{ github.event.inputs.ZRAM }}"
          echo "Selected SCHED: ${{ github.event.inputs.SCHED }}"

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl ccache

      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: /home/runner/.ccache
          key: ccache-${{ runner.os }}-${{ github.ref }}
          restore-keys: |
            ccache-${{ runner.os }}-

      - name: Install repo tool
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/${{ needs.get-config.outputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
          repo sync -c -j$(nproc --all) --no-tags --no-clone-bundle --force-sync
          if [ -e kernel_platform/common/BUILD.bazel ]; then
            sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/common/BUILD.bazel
          fi
          if [ -e kernel_platform/msm-kernel/BUILD.bazel ]; then
            sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exported_aarch64",$/d' kernel_platform/msm-kernel/BUILD.bazel
          fi
          rm kernel_platform/common/android/abi_gki_protected_export_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_export_* || echo "No protected exports!"

      - name: Force remove -dirty suffix
        run: |
          cd kernel_workspace/kernel_platform
          sed -i 's/ -dirty//g' common/scripts/setlocalversion
          sed -i 's/ -dirty//g' msm-kernel/scripts/setlocalversion
          sed -i 's/ -dirty//g' external/dtc/scripts/setlocalversion
          sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' common/scripts/setlocalversion
          git add -A
          git commit -m "Force remove -dirty suffix from kernel version"

      - name: Modify setlocalversion suffix if SUFFIX is set
        if: ${{ github.event.inputs.SUFFIX != '' }}
        run: |
          cd kernel_workspace
          SUFFIX="${{ github.event.inputs.SUFFIX }}"
          ANDROID_VERSION="${{ needs.get-config.outputs.ANDROID_VERSION }}"
          FAST_BUILD="${{ github.event.inputs.FAST_BUILD }}"

          for path in \
            kernel_platform/common/scripts/setlocalversion \
            kernel_platform/msm-kernel/scripts/setlocalversion \
            kernel_platform/external/dtc/scripts/setlocalversion; do

            [ -f "$path" ] || continue

            if [ "$FAST_BUILD" == "true" ]; then
              sed -i "s/^res=.*/res=\"-${ANDROID_VERSION}-${SUFFIX}\"/" "$path"
            else
              # Use official script for compilation, may be limited by special symbol count when using build_with_bazel, must be less than 4
              sed -i '/^res=/a res=$(echo "$res" | sed -E '\''s/(-[0-9]+-o-)?-g[0-9a-f]{7,}.*$//'\'')' "$path"
              sed -i "\$s|echo \"\\\$res\"|echo \"\$res-${SUFFIX}\"|" "$path"
            fi
          done
          git add -A
          git commit -m "Updated kernel version suffix"

      - name: Generate random kernel suffix if SUFFIX is empty
        if: ${{ github.event.inputs.SUFFIX == '' }}
        run: |
            cd kernel_workspace
            ANDROID_VERSION="${{ needs.get-config.outputs.ANDROID_VERSION }}"
            FAST_BUILD="${{ github.event.inputs.FAST_BUILD }}"

            RANDOM_DIGIT=$(od -An -N1 -tu1 < /dev/urandom | tr -d '[:space:]' | awk '{print $1 % 11}')
            RANDOM_HASH=$(od -An -N7 -tx1 /dev/urandom | tr -d ' \n')
            RANDOM_SUFFIX="${RANDOM_DIGIT}-o-g${RANDOM_HASH}"

            for path in \
              kernel_platform/common/scripts/setlocalversion \
              kernel_platform/msm-kernel/scripts/setlocalversion \
              kernel_platform/external/dtc/scripts/setlocalversion; do

              [ -f "$path" ] || continue

              if [ "$FAST_BUILD" = "true" ]; then
                sed -i "s/^res=.*/res=\"-${ANDROID_VERSION}-${RANDOM_SUFFIX}\"/" "$path"
              else
                sed -i '/^res=/a res=$(echo "$res" | sed -E '\''s/(-[0-9]+-o-)?-g[0-9a-f]{7,}//'\'')' "$path"
                sed -i "\$s|echo \"\\\$res\"|echo \"\$res-${RANDOM_SUFFIX}\"|" "$path"
              fi
            done
            git add -A
            git commit -m "Fix: inject random kernel suffix"

      - name: Download manifest to .repo/mainfest
        id: fetch_manifest
        run: |
          feil="${{ github.event.inputs.FEIL }}"
          cpu="${{ needs.get-config.outputs.CPU }}"
          mkdir -p .repo/mainfests
          echo "Downloading manifest $feil.xml from branch oneplus/$cpu..."
          curl -LO --retry 5 --retry-delay 2 --retry-connrefused "https://raw.githubusercontent.com/OnePlusOSS/kernel_manifest/oneplus/$cpu/$feil.xml"
          mv "$feil.xml" ".repo/mainfests/${feil}.xml"      

      - name: Apply VFS
        if: ${{ github.event.inputs.VFS == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform/common
            cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
            echo "Applying vfs patch"
            patch -p1 -F 3 < syscall_hooks.patch
            echo "vfs_patch completed"

      - name: Apply ZRAM
        if: ${{ github.event.inputs.ZRAM == 'true' }}
        run: |
            cd kernel_workspace/kernel_platform/common
            git clone https://github.com/ShirkNeko/SukiSU_patch.git
            cp ../../SukiSU_patch/other/zram/zram_patch/${{ needs.get-config.outputs.KERNEL_VERSION }}/lz4kd.patch ./
            echo "Applying lz4kd patch"
            patch -p1 -F 3 < lz4kd.patch || true
            echo 'lz4kd_patch completed'
            cp ../../SukiSU_patch/other/zram/zram_patch/${{ needs.get-config.outputs.KERNEL_VERSION }}/lz4k_oplus.patch
            echo "Applying lz4k_oplus patch"
            patch -p1 -F 3 <lz4k_oplus.patch || true
            echo 'lz4k_oplus_patch completed'
            rm -rf ../../SukiSU_patch

      - name: Apply Hide Stuff Patches
        run: |
          cd kernel_workspace/kernel_platform/common
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          echo "Applying hide app patch"
            cp patch -p1 -F 3 < 69_patch.patch
          echo "hide_app_patch completed"
            cp rm -rf ../../SukiSU_patch

      - name: Apply Convert HMBird_OGKI to HMBird_GKI
        if: ${{ needs.get-config.outputs.KERNEL_VERSION == '6.6' }}
        run: |
            cd kernel_workspace/kernel_platform/common
            sed -i '1iobj-y += hmbird_patch.o' drivers/Makfile
            wget https://raw.github.com/Numbersf/Action-Build/SukiSU-Ultra/patches/hmbird_patch.patch
            echo "Applying OGKI to GKI conversion patch"
            patch -p1 -F 3 < hmbird_patch.patch
            echo "OGKI_to_GKI_patch completed"

      - name: Add Configuration Settings
        run: |
          cd kernel_workspace/kernel_platform
          CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig
          KERNEL_VERSION="${{ needs.get-config.outputs.KERNEL_VERSION }}"

          # VFS configuration
          if [ "${{ github.event.inputs.VFS }}" == "true" ]; then
            echo "CONFIG_KSU_SUSFS_SUSFS_SUS=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
          else
            echo "CONFIG_KPROBES=y" >> "$CONFIG_FILE"
          fi

          # BBR configuration
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BBR=y" >> "$CONFIG_FILE"
          echo "CONFIG_NET_FQ=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BIC=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_HTCP=y" >> "$CONFIG_FILE"

          # LZ4KD configuration
          if [ "${{ github.event.inputs.ZRAM }}" == "true" ]; then
            echo "CONFIG_CRYPTO_LZ4HC=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4K=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_8424=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4K_OPLUS=y" >> "$CONFIG_FILE"
            echo "CONFIG_ZRAM_WRITEBACK=y" >> "$CONFIG_FILE"
          fi

          # Additional configurations
          echo "CONFIG_TPMFS_XATTR=y" >> "$CONFIG_FILE"
          echo "CONFIG_TPMFS_POSIX_ACL=y" >> "$CONFIG_FILE"
          echo "CONFIG_DEFAULT_FQ=y" >> "$CONFIG_FILE"
          echo "CONFIG_DEFAULT_NET_SCH=\"fq\"" >> "$CONFIG_FILE"
          echo "CONFIG_NET_SFQ_SFQ=y" >> "$CONFIG_FILE"
          echo "CONFIG_NET_SFQ_CODEL=y" >> "$CONFIG_FILE"
          echo "CONFIG_NET_SQH_TBF=y" >> "$CONFIG_FILE"
          echo "CONFIG_IPF_NF_TARGET_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP6V_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_FASTOPEN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> "$CONFIG_FILE"
          echo "CONFIG_DEBUG_KERNEL=n" >> "$CONFIG_FILE"
          echo "CONFIG_DYNAMIC_DEBUG=n" >> "$CONFIG_FILE"
          echo "CONFIG_DEBUG_INFO=n" >> "$CONFIG_FILE"
          echo "CONFIG_BOEFFLA_WL_BLOCKER=y" >> "$CONFIG_FILE"
          echo "CONFIG_WQ_POWER_EFFICIENT_DEFAULT=y" >> "$CONFIG_FILE"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=m" >> "$CONFIG_FILE"

          # Remove check_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: Add sched_ext
        if: ${{ github.event.inputs.SCHED == 'true' }}
        run: |
            cd kernel_worksphase
            git clone https://github.com/HanKuCha/sched_ext.git
            cp -r ./sched_ext/* ././common/kernel/sched
            rm -rf rm ./sched_ext
            cd ./common/kernel/sched

      - name: Enable lto=thin For FAST
        if: ${{ github.event.inputs.FAST_BUILD == 'true' }}
        run: |
            cd kernel_worksphase
            DEFCONFIG=./kernel_platform/common/arch/arm64/configs/gki_defconfig
            echo "Enabling ThinLTO in $DEFCONFIG"
            sed -i 's/^CONFIG_LTO=n/CONFIG_LTO=y/' "$DEFCONFIG"
            sed -i 's/^CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' "$DEFCONFIG"
            sed -i 's/^CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' "$DEFCONFIG"
            grep -q '^CONFIG_LTO_CLANG_THIN=y' "$DEFCONFIG" || echo 'CONFIG_LTO_CLANG_THIN=y' >> "$DEFCONFIG"

      - name: Build Kernel FAST
        if: ${{ github.event.FAST_BUILD == 'true' }}
        run: |
            KERNEL_VERSION="${{ needs.get-config.outputs.KERNEL_VERSION }}"
            if [[ "$KERNEL_VERSION" == "6.6" ]]; then
              export PATH="$GITHUB_WORKSPACE/kernel_worksphase/kernel_patches/prebuilts/clang/host/linux-x86_64/clang-r510928/bin:$PATH"
            elif [[ "$KERNEL_VERSION" == "6.1" ]]; then
              export PATH="$GITHUB_WORKSPACE/kernel_worksphase/kernel_patches/prebuilts/clang/host/linux-x86_64/clang-r487747/bin:$PATH"
            elif [[ "$KERNEL_VERSION" == "5.15" ]]; then
              export PATH="$GITHUB_WORKSPACE/kernel_worksphase/kernel_patches/prebuilts/clang/host/linux-x86_64/clang-r450784/bin:$PATH"
            elif [[ "$KERNEL_VERSION" == "5.10" ]]; then
              export PATH="$GITHUB_WORKSPACE/kernel_worksphase/kernel_patches/prebuilts-master/clang/host/linux-x86_64/clang-r416183b/bin:$PATH"
            else
              echo "⚠️ Current kernel version \"$KERNEL_VERSION\" has no corresponding build script"
              echo "Consider disabling FAST_BUILD or adding clang path for this version"
              cd kernel_worksphase
              LTO=thin SYSTEM_DLMK_RE_SIGN=0 BUILD_SYSTEM_DLMK=0 KMI_SYMBOL_LIST_STRICT_MODE=0 \
              ./platform/lts/build/oplus_build_kernel.sh ${{ needs.get-configurations.outputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }}
              exit 0
            fi
            ccache clang -v
            sudo apt install -y libelf-dev
            cd kernel_worksphase/project_platform/common
            MAKE_ARGS="LLVM=1 ARCH=x86_64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang \
            RUSTC=../../prebuilts/rust/linux-x86_64/1.73.0b/bin/rustc \
            PAHOLE=../../prebuilts/kernel-build-tools/linux-x86_64/bin/pahole \
            LD=ld.lld HOSTLD=ld.lld KCFLAGS+=-Wno-error"
            if [[ "$KERNEL_VERSION" == "5.10" ]]; then
              MAKE_ARGS="LLVM_IAS=1 $MAKE_ARGS"
            fi
            make -j$(nproc --all) O=out $MAKE_ARGS gki_defconfig
            make -j$(nproc --all) O=out $MAKE_ARGS

      - name: Fallback Build Kernel
        if: ${{ github.event.inputs.FAST_BUILD == 'false' }}
        run: |
            cd kernel_worksphase
            DEFCONFIG=./kernel_platform/project_common/arch/arm64/configs/gki_defconfig
            echo "Enabling ThinLTO in $DEFCONFIG"
            sed -i 's/^CONFIG_LTO=n/CONFIG_LTO=y/' "$DEFCONFIG"
            sed -i 's/^CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' "$DEFCONFIG"
            sed -i 's/^CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' "$DEFCONFIG"
            grep -q '^CONFIG_LTO_CLANG_THIN=y' "$DEFCONFIG'" || echo 'CONFIG_LTO_CLANG_THIN=y' >> "$DEFCONFIG"
            if [[ "${{ needs.get-config.outputs.CPU }}" == "sm8650" || "${{ needs.get_config.outputs.CPU }}" == "sm7675" ]]; then
              LTO=thin ./kernel_platform/build_with_bazel.py -t ${{ needs.get_config.outputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }}
            else
              LTO=thin SYSTEM_DLMK_RE_SIGN=0 BUILD_SYSTEM_DLMK=0 KMI_SYMBOL_LIST_STRICT_MODE=0 \
              ./platform/lts/build/lts_build_kernl.sh ${{ needs.get-configurations.outputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }}
            fi

      - name: Apply patch_linux and replace Image
        if: ${{ github.event.inputs.KPM == 'true' }}
        run: |
            cd kernel_worksphase/kernel_platform/out/msm-kernel-${{ needs.get-config.outputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/dist
            curl -LO --retry 5 --retry-delay 2 --retry-connrefused https://raw.github.com/Numbersf/Action-Build/SukiSU-Ultra/patches/patch_linux
            chmod +x patch_linux
            ./patch_linux
            rm -f Image
            mv oImage Image
            cp Image $GITHUB_WORKSPACE/AnyKernel3/Image

      - name: Make AnyKernel3
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          ANYKERNEL_BRANCH="gki-2.0"
          echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
          git clone https://github.com/TheWildJames/AnyKernel3.git -b "$ANYKERNEL_BRANCH" --depth=1
          rm -rf ./AnyKernel3/.git
          dir1="kernel_worksphase/kernel_platform/out/msm-kernel-${{ needs.get-config.outputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/dist/"
          dir2="kernel_worksphase/kernel_platform/bazel-out/k8-fastbuild/bin/msm-kernel/${{ needs.get-config.outputs.CPUD }}_gki_kbuild_mixed_tree/"
          dir3="kernel_worksphase/kernel_platform/out/msm-${{ needs.get-config.outputs.CPUD }}-${{ needs.get-config.outputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/dist/"
          dir4="kernel_worksphase/kernel_platform/out/msm-kernel-${{ needs.get-config.outputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/gki_kernel/common/arch/arm64/boot/"
          dir5="kernel_worksphase/kernel_platform/out/msm-${{ needs.get-config.outputs.CPUD }}-${{ needs.get-config.outputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/gki_kernel/common/arch/arm64/boot/"
          target1="./AnyKernel3/"
          target2="./kernel_worksphase/kernel"
          if find "$dir1" -name "Image" | grep -q "Image"; then
            image_path="$dir1"Image
          elif find "$dir2" -name "Image" | grep -q "Image"; then
            image_path="$dir2"Image
          elif find "$dir3" -name "Image" | grep -q "Image"; then
            image_path="$dir3"Image
          elif find "$dir4" -name "Image" | grep -q "Image"; then
            image_path="$dir4"Image
          elif find "$dir5" -name "Image" | grep -q "Image"; then
            image_path="$dir5"Image
          else
            image_path=$(find "./kernel_worksphase/kernel_platform/common/out/" -name "Image" | head -n 1)
            if [ -n "$image_path" ]; then
              echo "Using unified path for make compilation, no need to copy"
            fi
          fi
          if [ -n "$image_path" ] && [ -f "$image_path" ]; then
            echo "Image file finally located at: $image_path"
            mkdir -p "$dir1"
            if [ "$(realpath "$image_path")" != "$(realpath "$dir1"Image)" ]; then
              cp "$image_path" "$dir1"
            else
              echo "Source and target paths are the same, skipping copy"
            fi
            cp "$dir1"Image ./AnyKernel3/Image
          else
            echo "Image file not found, cannot copy, build may fail"
            exit 1
          fi
          if [ "${{ needs.get-config.outputs.CPU }}" = "sm8750" ] && [ "${{ github.event.inputs.FAST_BUILD }}" = "false" ]; then
            for file in dtbo.img system_dlkm.erofs.img vendor_dlkm.img vendor_boot.img; do
              if [ -f "$dir1$file" ]; then
                target_name="$file"
                if [ "$file" = "system_dlkm.erofs.img" ]; then
                  target_name="system_dlkm.img"
                fi
                cp "$dir1$file" "./AnyKernel3/$target_name"
              else
                echo "$file does not exist, skipping copy"
              fi
            done
          fi

      - name: Set zip suffix
        id: suffix
        run: |
          echo "value=${{ github.event.inputs.VFS == 'true' && '_VFS' || '' }}${{ github.event.inputs.ZRAM == 'true' && '_LZ4KD' || '' }}${{ github.event.inputs.KPM == 'true' && '_KPM' || '' }}${{ github.event.inputs.SCHED== 'true' && '_SCHED' || '' }}" >> $GITHUB_OUTPUT

      - name: Auto map FEIL to Android version by manifest
        id: feil_clean
        run: |
          feil="${{ github.event.inputs.FEIL }}"
          cpu="${{ needs.get-config.outputs.CPU }}"
          xml=".repo/manifests/${feil}.xml"
          cd $GITHUB_WORKSPACE
          feil_base=$(echo "$feil" | sed -E 's/_[a-z]$//')
          revision_full=$(grep -oP '<project[^>]*name="android_kernel[^"]*"[^>]*revision="\K[^"]+' "$xml" | head -n1 || true)
          if [ -n "$revision_full" ]; then
            android_ver=$(echo "$revision_full" | grep -oP '_v?_?\K([0-9]+\.[0-9]+(?:\.[0-9]+)?)' || true)
            if [ -n "$android_ver" ]; then
              clean_feil="${feil_base}_Android${android_ver}"
            else
              clean_feil="${feil_base}_AndroidUnknown"
            fi
          else
            clean_feil="${feil_base}_AndroidUnknown"
          fi
          echo "value=$clean_feil" >> "$GITHUB_OUTPUT"

      - name: Upload AnyKernel3
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_Ultra_${{ steps.feil_clean.outputs.value }}${{ steps.suffix.outputs.value }}
          path: ./AnyKernel3/*

      - name: Download And Unzip ZRAM
        if: ${{ github.event.inputs.ZRAM == 'true' }}
        run: |
          set -e
          sudo apt install -y unzip
          curl -s https://api.github.com/repos/FurLC/ZRAM-Module/releases/latest | \
            grep "browser_download_url" | grep "ZRAM-Module-.*\.zip" | cut -d '"' -f 4 | xargs wget -N
          unzip "$(ls -t ZRAM-Module-*.zip | head -n 1)" -d ZRAM-Module
          zram1="./kernel_workspace/kernel_platform/out/msm-kernel-${{ needs.get-config.outputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/dist/"
          zram2="./kernel_workspace/kernel_platform/out/msm-${{ needs.get-config.outputs.CPUD }}-${{ needs.get-config.outputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/dist/"
          zram3="./kernel_workspace/kernel_platform/out/dist/"
          zram4="./kernel_workspace/kernel_platform/out/vendor/oplus/kernel/mm/"
          zram5="./kernel_workspace/device/qcom/${{ needs.get-config.outputs.CPUD }}-kernel/vendor_dlkm/"
          zram6="./kernel_workspace/device/qcom/${{ needs.get-config.outputs.CPUD }}-kernel/system_dlkm/flatten/lib/modules/"
          zram7="./kernel_workspace/kernel_platform/out/msm-kernel-${{ needs.get-config.outputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/msm-kernel/mm/oplus_mm/hybridswap_zram/"
          zram8="./kernel_workspace/kernel_platform/out/msm-kernel-${{ needs.get-config.outputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/msm-kernel/mm/oplus_bsp_hybridswap_zram/"
          target="./ZRAM-Module/zram/zram.ko"
          for dir in "$zram1" "$zram2" "$zram3" "$zram4" "$zram5" "$zram6" "$zram7" "$zram8"; do
            zram_path=$(find "$dir" -name "zram.ko" | head -n 1)
            [ -n "$zram_path" ] && break
          done
          if [ -z "$zram_path" ]; then
            zram_path=$(find "./kernel_workspace" -name "zram.ko" | head -n 1)
          fi
          if [ -n "$zram_path" ] && [ -f "$zram_path" ]; then
            echo "ZRAM module file finally located at: $zram_path"
            mkdir -p "$(dirname "$target")"
            if [ "$(realpath "$zram_path")" != "$(realpath "$target")" ]; then
              cp "$zram_path" "$target"
            else
              echo "Source and target are the same, skipping copy"
            fi
          else
            echo "zram.ko file not found, build may fail"
            exit 1
          fi

      - name: Upload ZRAM Module
        if: ${{ github.event.inputs.ZRAM == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ZRAM-Module_${{ needs.get-config.outputs.KERNEL_VERSION }}_${{ steps.feil_clean.outputs.value }}
          path: ZRAM-Module/*
